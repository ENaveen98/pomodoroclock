{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Clock","props","state","breakLength","sessionLength","statusUpdate","timeLeftmm","timeLeftss","timerRunning","reset","inBreak","Reset","bind","DecreaseBreak","DecreaseSession","IncreaseBreak","IncreaseSession","ToggleStartStop","startCountDown","Tick","secondsRemaining","this","setState","clearInterval","intervalHandle","resetSound","min","Math","floor","sec","playSound","setInterval","sound","document","getElementById","pause","currentTime","play","id","onClick","className","src","autoplay","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ca5989b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clock />\n    </div>\n  );\n}\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      breakLength: 5,\n      sessionLength: 25,\n      statusUpdate: \"Idle\",\n      timeLeftmm: \"25\",\n      timeLeftss: \"00\",\n      timerRunning: false,\n      reset: true,\n      inBreak: false,\n    };\n    this.Reset = this.Reset.bind(this);\n    this.DecreaseBreak = this.DecreaseBreak.bind(this);\n    this.DecreaseSession = this.DecreaseSession.bind(this);\n    this.IncreaseBreak = this.IncreaseBreak.bind(this);\n    this.IncreaseSession = this.IncreaseSession.bind(this);\n    this.ToggleStartStop = this.ToggleStartStop.bind(this);\n    this.startCountDown = this.startCountDown.bind(this);\n    this.Tick = this.Tick.bind(this);\n\n    // this.intervalHandle = 0;\n    this.secondsRemaining = 0;\n  }\n\n  Reset() {\n    this.setState({\n      breakLength: 5,\n      sessionLength: 25,\n      statusUpdate: \"Idle\",\n      timeLeftmm: \"25\",\n      timeLeftss: \"00\",\n      timerRunning: false,\n      reset: true,\n      inBreak: false,\n    });\n    clearInterval(this.intervalHandle);\n    this.resetSound();\n  }\n\n  DecreaseBreak() {\n    if (this.state.breakLength > 1) {\n      this.setState((state) => ({ breakLength: state.breakLength - 1 }));\n    }\n  }\n\n  DecreaseSession() {\n    if (this.state.sessionLength > 1) {\n      if (this.state.reset) {\n        this.setState((state) => ({\n          sessionLength: state.sessionLength - 1,\n          timeLeftmm: state.sessionLength - 1,\n        }));\n      } else {\n        this.setState((state) => ({\n          sessionLength: state.sessionLength - 1,\n        }));\n      }\n    }\n  }\n\n  IncreaseBreak() {\n    if (this.state.breakLength < 60) {\n      this.setState((state) => ({ breakLength: state.breakLength + 1 }));\n    }\n  }\n\n  IncreaseSession() {\n    if (this.state.sessionLength < 60) {\n      if (this.state.reset) {\n        this.setState((state) => ({\n          sessionLength: state.sessionLength + 1,\n          timeLeftmm: state.sessionLength + 1,\n        }));\n      } else {\n        this.setState((state) => ({\n          sessionLength: state.sessionLength + 1,\n        }));\n      }\n    }\n  }\n\n  ToggleStartStop() {\n    if (this.state.timerRunning) {\n      this.setState({ timerRunning: false, reset: false });\n      this.startCountDown();\n    } else {\n      this.setState({ timerRunning: true, reset: false });\n      this.startCountDown();\n    }\n  }\n\n  Tick() {\n    this.secondsRemaining--;\n\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - min * 60;\n\n    this.setState({\n      timeLeftmm: min,\n      timeLeftss: sec,\n    });\n    if (min < 10) {\n      this.setState((state) => ({\n        timeLeftmm: \"0\" + state.timeLeftmm,\n      }));\n    }\n    if (sec < 10) {\n      this.setState((state) => ({\n        timeLeftss: \"0\" + state.timeLeftss,\n      }));\n    }\n\n    if ((min === 0) & (sec === 0)) {\n      this.playSound();\n      // Starting Break\n      if (!this.state.inBreak) {\n        this.setState({ statusUpdate: \"In Breaaak\" });\n        this.secondsRemaining =\n          this.secondsRemaining + this.state.breakLength * 60 + 1;\n        this.state.inBreak = true;\n      }\n      // Starting Session\n      else {\n        this.setState({ statusUpdate: \"In Sesssion\" });\n        this.secondsRemaining =\n          this.secondsRemaining + this.state.sessionLength * 60 + 1;\n        this.state.inBreak = false;\n      }\n    }\n  }\n\n  startCountDown() {\n    // Just after Resetting\n    if (this.state.reset) {\n      this.secondsRemaining = this.state.sessionLength * 60;\n      this.intervalHandle = setInterval(this.Tick, 1000);\n    }\n    // While Running and if Stopped\n    else if (this.state.timerRunning) {\n      clearInterval(this.intervalHandle);\n    }\n    // While Runnning and Stopped and then Started\n    else if (!this.state.timerRunning) {\n      this.intervalHandle = setInterval(this.Tick, 1000);\n    }\n  }\n\n  resetSound() {\n    // let audio = new Audio(sound[this.props.playKey]);\n    // audio.play();\n    const sound = document.getElementById(\"beep\");\n    sound.pause();\n    sound.currentTime = 0;\n  }\n\n  playSound() {\n    // let audio = new Audio(sound[this.props.playKey]);\n    // audio.play();\n    const sound = document.getElementById(\"beep\");\n    sound.currentTime = 0;\n    sound.play();\n  }\n\n  render() {\n    return (\n      <div id=\"clocl-elements\">\n        <div id=\"break-label\">\n          <p>Break Length</p>\n        </div>\n        <div id=\"session-label\">\n          <p>Session Length</p>\n        </div>\n        <button id=\"break-decrement\" onClick={this.DecreaseBreak}>\n          bd\n        </button>\n        <button id=\"session-decrement\" onClick={this.DecreaseSession}>\n          sd\n        </button>\n        <button id=\"break-increment\" onClick={this.IncreaseBreak}>\n          bi\n        </button>\n        <button id=\"session-increment\" onClick={this.IncreaseSession}>\n          si\n        </button>\n        <div id=\"break-length\">{this.state.breakLength}</div>\n        <div id=\"session-length\">{this.state.sessionLength}</div>\n        <div id=\"timer-label\">{this.state.statusUpdate}</div>\n        <div id=\"time-left\">\n          {this.state.timeLeftmm}:{this.state.timeLeftss}\n        </div>\n        <button id=\"start_stop\" onClick={this.ToggleStartStop}>\n          Start/Stop\n        </button>\n        <button id=\"reset\" onClick={this.Reset}>\n          Reset!\n        </button>\n        <audio\n          className=\"clip\"\n          id=\"beep\"\n          src=\"https://www.soundjay.com/misc/bell-ringing-04.mp3\"\n          autoplay=\"false\"\n        ></audio>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}